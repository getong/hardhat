import type * as KeccakT from "keccak";

import { createHash } from "node:crypto";

/**
 * Computes the Keccak-256 hash of the input bytes.
 *
 * @param bytes The input bytes to hash.
 * @returns The Keccak-256 hash of the input bytes.
 */
export async function keccak256(bytes: Uint8Array): Promise<Uint8Array> {
  // We have to typecast the import because the type definitions for the
  // `keccak` package are incorrect.
  const { default: createKeccakHash } = (await import("keccak")) as unknown as {
    default: (algorithm: KeccakT.KeccakAlgorithm) => KeccakT.Keccak;
  };
  return createKeccakHash("keccak256").update(Buffer.from(bytes)).digest();
}

/**
 * Creates a non-cryptographic hash-based identifier for the given input.
 *
 * This function is primarily intended for generating unique identifiers from
 * a given input string.
 * It uses the MD5 hash algorithm, which is not cryptographically secure, but
 * is sufficient for this use case as long as the input is not generated by an
 * attacker.
 *
 * Note: The exact algorithm used (MD5) is not crucial for the function's
 * purpose of generating unique identifiers, and could be replaced if needed.
 *
 * @param data The input string to be hashed.
 * @returns The MD5 hash of the input string, represented as a
 * hexadecimal string.
 */
export function createNonCryptographicHashId(data: string): string {
  return createHash("md5").update(data).digest("hex");
}
