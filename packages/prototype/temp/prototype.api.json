{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.43.1",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@nomicfoundation/prototype!",
  "docComment": "",
  "name": "@nomicfoundation/prototype",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@nomicfoundation/prototype!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!ChainedHook:type",
          "docComment": "/**\n * A chained hook or never.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ChainedHook<HookT> = "
            },
            {
              "kind": "Content",
              "text": "HookT extends (...params: [\n    ...infer ParamsT,\n    next: (...paramasNext: infer NextParamsT) => infer NextRetT\n]) => infer RetT ? "
            },
            {
              "kind": "Reference",
              "text": "IfEqual",
              "canonicalReference": "@nomicfoundation/prototype!IfEqual:type"
            },
            {
              "kind": "Content",
              "text": "<ParamsT, NextParamsT, "
            },
            {
              "kind": "Reference",
              "text": "IfEqual",
              "canonicalReference": "@nomicfoundation/prototype!IfEqual:type"
            },
            {
              "kind": "Content",
              "text": "<RetT, NextRetT, HookT>> : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/hooks.ts",
          "releaseTag": "Public",
          "name": "ChainedHook",
          "typeParameters": [
            {
              "typeParameterName": "HookT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!ConfigHooks:interface",
          "docComment": "/**\n * Config-related hooks.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ConfigHooks "
            }
          ],
          "fileUrlPath": "src/types/hooks.ts",
          "releaseTag": "Public",
          "name": "ConfigHooks",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!ConfigHooks#extendUserConfig:member",
              "docComment": "/**\n * Provide an implementation of this hook to extend the user's config, before any validation or resolution is done.\n *\n * @param config - The user's config.\n *\n * @param next - A function to call to the next hook.\n *\n * @returns The extended config.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extendUserConfig: "
                },
                {
                  "kind": "Content",
                  "text": "(config: "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatUserConfig",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatUserConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ", next: (c: "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatUserConfig",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatUserConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HardhatUserConfig",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatUserConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HardhatUserConfig",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatUserConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "extendUserConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 14
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!ConfigHooks#resolveUserConfig:member",
              "docComment": "/**\n * Provide an implementation of this hook to resolve parts of the user's config into the final HardhatConfig.\n *\n * To use this hook, plugins are encouraged to call `next(config)` first, and construct a resolved config based on its result. Note that While that result is typed as `HardhatConfig`, it may actually be incomplete, as other plugins may not have resolved their parts of the config yet.\n *\n * @param config - The user's config.\n *\n * @param next - A function to call to the next hook.\n *\n * @returns The resolved config.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolveUserConfig: "
                },
                {
                  "kind": "Content",
                  "text": "(config: "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatUserConfig",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatUserConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ", resolveConfigurationVariable: (variableOrString: "
                },
                {
                  "kind": "Reference",
                  "text": "ConfigurationVariable",
                  "canonicalReference": "@nomicfoundation/prototype!ConfigurationVariable:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string) => "
                },
                {
                  "kind": "Reference",
                  "text": "ResolvedConfigurationVariable",
                  "canonicalReference": "@nomicfoundation/prototype!ResolvedConfigurationVariable:interface"
                },
                {
                  "kind": "Content",
                  "text": ", next: (userConfig: "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatUserConfig",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatUserConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ", nextResolveConfigurationVariable: (variableOrString: "
                },
                {
                  "kind": "Reference",
                  "text": "ConfigurationVariable",
                  "canonicalReference": "@nomicfoundation/prototype!ConfigurationVariable:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string) => "
                },
                {
                  "kind": "Reference",
                  "text": "ResolvedConfigurationVariable",
                  "canonicalReference": "@nomicfoundation/prototype!ResolvedConfigurationVariable:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HardhatConfig",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HardhatConfig",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resolveUserConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 22
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!ConfigHooks#validateUserConfig:member",
              "docComment": "/**\n * Provide an implementation of this hook to run validations on the user's config.\n *\n * @param config - The user's config.\n *\n * @returns An array of validation errors.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validateUserConfig: "
                },
                {
                  "kind": "Content",
                  "text": "(config: "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatUserConfig",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatUserConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HardhatUserConfigValidationError",
                  "canonicalReference": "@nomicfoundation/prototype!HardhatUserConfigValidationError:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "validateUserConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!ConfigurationVariable:interface",
          "docComment": "/**\n * A configuration variable to be fetched at runtime from different sources, depending on the user's setup.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ConfigurationVariable "
            }
          ],
          "fileUrlPath": "src/types/config.ts",
          "releaseTag": "Public",
          "name": "ConfigurationVariable",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!ConfigurationVariable#_type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_type: "
                },
                {
                  "kind": "Content",
                  "text": "\"ConfigurationVariable\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!ConfigurationVariable#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!ConfigurationVariableHooks:interface",
          "docComment": "/**\n * Configuration variable-related hooks.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ConfigurationVariableHooks "
            }
          ],
          "fileUrlPath": "src/types/hooks.ts",
          "releaseTag": "Public",
          "name": "ConfigurationVariableHooks",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!ConfigurationVariableHooks#resolve:member",
              "docComment": "/**\n * Provide an implementation of this hook to customize how to resolve a configuration variable into its actual value.\n *\n * @param interruptions - A `UserInterruptionManager` that can be used to interact with the user.\n *\n * @param variable - The configuration variable or string to resolve.\n *\n * @param next - A function to call if the hook implementation decides to not handle the resolution of this variable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolve: "
                },
                {
                  "kind": "Content",
                  "text": "(context: "
                },
                {
                  "kind": "Reference",
                  "text": "HookContext",
                  "canonicalReference": "@nomicfoundation/prototype!HookContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ", variable: "
                },
                {
                  "kind": "Reference",
                  "text": "ConfigurationVariable",
                  "canonicalReference": "@nomicfoundation/prototype!ConfigurationVariable:interface"
                },
                {
                  "kind": "Content",
                  "text": ", next: (nextContext: "
                },
                {
                  "kind": "Reference",
                  "text": "HookContext",
                  "canonicalReference": "@nomicfoundation/prototype!HookContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ", nextVariable: "
                },
                {
                  "kind": "Reference",
                  "text": "ConfigurationVariable",
                  "canonicalReference": "@nomicfoundation/prototype!ConfigurationVariable:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resolve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 14
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@nomicfoundation/prototype!configVariable:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function configVariable(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ConfigurationVariable",
              "canonicalReference": "@nomicfoundation/prototype!ConfigurationVariable:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/config.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "configVariable"
        },
        {
          "kind": "Function",
          "canonicalReference": "@nomicfoundation/prototype!createHardhatRuntimeEnvironment:function(1)",
          "docComment": "/**\n * Creates an instances of the Hardhat Runtime Environment.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createHardhatRuntimeEnvironment(config: "
            },
            {
              "kind": "Reference",
              "text": "HardhatUserConfig",
              "canonicalReference": "@nomicfoundation/prototype!~HardhatUserConfig:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HardhatRuntimeEnvironment",
              "canonicalReference": "@nomicfoundation/prototype!HardhatRuntimeEnvironment:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "createHardhatRuntimeEnvironment"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!HardhatConfig:interface",
          "docComment": "/**\n * The resolved Hardhat configuration.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HardhatConfig "
            }
          ],
          "fileUrlPath": "src/types/config.ts",
          "releaseTag": "Public",
          "name": "HardhatConfig",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatConfig#privateKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "privateKey?: "
                },
                {
                  "kind": "Reference",
                  "text": "ResolvedConfigurationVariable",
                  "canonicalReference": "@nomicfoundation/prototype!ResolvedConfigurationVariable:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "privateKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatConfig#solidity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "solidity: "
                },
                {
                  "kind": "Reference",
                  "text": "SolidityConfig",
                  "canonicalReference": "@nomicfoundation/prototype!SolidityConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "solidity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!HardhatHooks:interface",
          "docComment": "/**\n * The different hooks that a plugin can define.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HardhatHooks "
            }
          ],
          "fileUrlPath": "src/types/hooks.ts",
          "releaseTag": "Public",
          "name": "HardhatHooks",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatHooks#config:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "config: "
                },
                {
                  "kind": "Reference",
                  "text": "ConfigHooks",
                  "canonicalReference": "@nomicfoundation/prototype!ConfigHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatHooks#configurationVariables:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "configurationVariables: "
                },
                {
                  "kind": "Reference",
                  "text": "ConfigurationVariableHooks",
                  "canonicalReference": "@nomicfoundation/prototype!ConfigurationVariableHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "configurationVariables",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatHooks#userInterruptions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userInterruptions: "
                },
                {
                  "kind": "Reference",
                  "text": "UserInterruptionHooks",
                  "canonicalReference": "@nomicfoundation/prototype!UserInterruptionHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "userInterruptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!HardhatPlugin:interface",
          "docComment": "/**\n * A Hardhat plugin.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HardhatPlugin "
            }
          ],
          "fileUrlPath": "src/types/plugins.ts",
          "releaseTag": "Public",
          "name": "HardhatPlugin",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatPlugin#dependencies:member",
              "docComment": "/**\n * An arary of plugins that this plugins depends on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dependencies?: "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatPlugin",
                  "canonicalReference": "@nomicfoundation/prototype!HardhatPlugin:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dependencies",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatPlugin#hooks:member",
              "docComment": "/**\n * An object with the different hooks that this plugin defines.\n *\n * Each entry in this object is a a category of hooks, for example `\"config\"` or `\"userInterruption\"`.\n *\n * You can define each category as an object with keys that are the hook names, and values that are the hook implementations, but this way of defining hooks is only for development.\n *\n * In production, you must use a `string` with the path to a file that exports as `default` an object with the hook implementations.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hooks?: "
                },
                {
                  "kind": "Reference",
                  "text": "LazyLoadedHookCategoryFactories",
                  "canonicalReference": "@nomicfoundation/prototype!LazyLoadedHookCategoryFactories:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hooks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatPlugin#id:member",
              "docComment": "/**\n * A unique id of the plugin.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatPlugin#npmPackage:member",
              "docComment": "/**\n * The npm package where the plugin is located, if any.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "npmPackage?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "npmPackage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!HardhatRuntimeEnvironment:interface",
          "docComment": "/**\n * The Hardhat Runtime Environment (HRE) is an object that exposes all the functionality available through Hardhat.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HardhatRuntimeEnvironment "
            }
          ],
          "fileUrlPath": "src/types/hre.ts",
          "releaseTag": "Public",
          "name": "HardhatRuntimeEnvironment",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatRuntimeEnvironment#config:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly config: "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatConfig",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatRuntimeEnvironment#hooks:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly hooks: "
                },
                {
                  "kind": "Reference",
                  "text": "HookManager",
                  "canonicalReference": "@nomicfoundation/prototype!HookManager:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hooks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatRuntimeEnvironment#interruptions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly interruptions: "
                },
                {
                  "kind": "Reference",
                  "text": "UserInterruptionManager",
                  "canonicalReference": "@nomicfoundation/prototype!UserInterruptionManager:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "interruptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatRuntimeEnvironment#userConfig:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly userConfig: "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatUserConfig",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatUserConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "userConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!HardhatUserConfig:interface",
          "docComment": "/**\n * The user's Hardhat configuration, as exported in their config file.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HardhatUserConfig "
            }
          ],
          "fileUrlPath": "src/types/config.ts",
          "releaseTag": "Public",
          "name": "HardhatUserConfig",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatUserConfig#privateKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "privateKey?: "
                },
                {
                  "kind": "Reference",
                  "text": "SensitiveString",
                  "canonicalReference": "@nomicfoundation/prototype!SensitiveString:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "privateKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatUserConfig#solidity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "solidity?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "SolidityUserConfig",
                  "canonicalReference": "@nomicfoundation/prototype!SolidityUserConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "solidity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!HardhatUserConfigValidationError:interface",
          "docComment": "/**\n * A HardhatUser validation error.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HardhatUserConfigValidationError "
            }
          ],
          "fileUrlPath": "src/types/hooks.ts",
          "releaseTag": "Public",
          "name": "HardhatUserConfigValidationError",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatUserConfigValidationError#message:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HardhatUserConfigValidationError#path:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!HookCategoryFactory:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type HookCategoryFactory<CategoryNameT extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "HardhatHooks",
              "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HardhatHooks",
              "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
            },
            {
              "kind": "Content",
              "text": "[CategoryNameT]>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/plugins.ts",
          "releaseTag": "Public",
          "name": "HookCategoryFactory",
          "typeParameters": [
            {
              "typeParameterName": "CategoryNameT",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 4,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!HookContext:interface",
          "docComment": "/**\n * The context that is passed to hook implementations.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HookContext "
            }
          ],
          "fileUrlPath": "src/types/hooks.ts",
          "releaseTag": "Public",
          "name": "HookContext",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HookContext#config:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly config: "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatConfig",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HookContext#hooks:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly hooks: "
                },
                {
                  "kind": "Reference",
                  "text": "HookManager",
                  "canonicalReference": "@nomicfoundation/prototype!HookManager:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hooks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!HookContext#interruptions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly interruptions: "
                },
                {
                  "kind": "Reference",
                  "text": "UserInterruptionManager",
                  "canonicalReference": "@nomicfoundation/prototype!UserInterruptionManager:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "interruptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!HookManager:interface",
          "docComment": "/**\n * An interface with utilities to interact with hooks.\n *\n * This interface provides methods register/unregister hooks, fetching hooks in the correct order, and run them in the most common execution patterns.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HookManager "
            }
          ],
          "fileUrlPath": "src/types/hooks.ts",
          "releaseTag": "Public",
          "name": "HookManager",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@nomicfoundation/prototype!HookManager#getHooks:member(1)",
              "docComment": "/**\n * Returns an array of hooks in the right execution order. This means the plugin hooks first, in the resolved plugins' order, followed by the dynamically registerd hooks in registration order.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHooks<HookCategoryNameT extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": ", HookNameT extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": "[HookCategoryNameT]"
                },
                {
                  "kind": "Content",
                  "text": ">(hookCategoryName: "
                },
                {
                  "kind": "Content",
                  "text": "HookCategoryNameT"
                },
                {
                  "kind": "Content",
                  "text": ", hookName: "
                },
                {
                  "kind": "Content",
                  "text": "HookNameT"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": "[HookCategoryNameT][HookNameT]>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 18
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hookCategoryName",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "hookName",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 11
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "HookCategoryNameT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "HookNameT",
                  "constraintTokenRange": {
                    "startIndex": 4,
                    "endIndex": 7
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "getHooks"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@nomicfoundation/prototype!HookManager#registerHooks:member(1)",
              "docComment": "/**\n * Registers hooks in a category.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerHooks<HookCategoryNameT extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(hookCategoryName: "
                },
                {
                  "kind": "Content",
                  "text": "HookCategoryNameT"
                },
                {
                  "kind": "Content",
                  "text": ", hookCategory: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": "[HookCategoryNameT]>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hookCategoryName",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "hookCategory",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "HookCategoryNameT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "registerHooks"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@nomicfoundation/prototype!HookManager#runHooksChain:member(1)",
              "docComment": "/**\n * Runs hooks in a chained fashion, where the last hook (as returned by getHooks) is called first, and can optionally call the next hook in the chain.\n *\n * For a hook to work with this method, it should look like `(arg1: Type1, ..., argN: TypeN, next: (a1: Type1, ..., aN: TypeN) => Promise<ReturnType>) => Promise<ReturnType>`\n *\n * Calling `next` will invoke the next hook in the chain. Note that `next` must only be called once.\n *\n * @param hookCategoryName - The name of the category of the hook to run.\n *\n * @param hookName - The name of the hook to run.\n *\n * @param initialParams - The params to pass to the first hook in the chain.\n *\n * @param defaultImplementation - The last function to execute in the chain. This is also called if there are no hooks.\n *\n * @returns The result of executing the chained hooks\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "runHooksChain<HookCategoryNameT extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": ", HookNameT extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": "[HookCategoryNameT]"
                },
                {
                  "kind": "Content",
                  "text": ", HookT extends "
                },
                {
                  "kind": "Reference",
                  "text": "ChainedHook",
                  "canonicalReference": "@nomicfoundation/prototype!ChainedHook:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": "[HookCategoryNameT][HookNameT]>"
                },
                {
                  "kind": "Content",
                  "text": ">(hookCategoryName: "
                },
                {
                  "kind": "Content",
                  "text": "HookCategoryNameT"
                },
                {
                  "kind": "Content",
                  "text": ", hookName: "
                },
                {
                  "kind": "Content",
                  "text": "HookNameT"
                },
                {
                  "kind": "Content",
                  "text": ", initialParams: "
                },
                {
                  "kind": "Reference",
                  "text": "InitialChainedHookParams",
                  "canonicalReference": "@nomicfoundation/prototype!InitialChainedHookParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<HookCategoryNameT, HookT>"
                },
                {
                  "kind": "Content",
                  "text": ", defaultImplementation: "
                },
                {
                  "kind": "Reference",
                  "text": "LastParameter",
                  "canonicalReference": "@nomicfoundation/prototype!LastParameter:type"
                },
                {
                  "kind": "Content",
                  "text": "<HookT>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Awaited",
                  "canonicalReference": "!Awaited:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Return",
                  "canonicalReference": "@nomicfoundation/prototype!Return:type"
                },
                {
                  "kind": "Content",
                  "text": "<HookT>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 23,
                "endIndex": 29
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hookCategoryName",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "hookName",
                  "parameterTypeTokenRange": {
                    "startIndex": 15,
                    "endIndex": 16
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initialParams",
                  "parameterTypeTokenRange": {
                    "startIndex": 17,
                    "endIndex": 19
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "defaultImplementation",
                  "parameterTypeTokenRange": {
                    "startIndex": 20,
                    "endIndex": 22
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "HookCategoryNameT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "HookNameT",
                  "constraintTokenRange": {
                    "startIndex": 4,
                    "endIndex": 7
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "HookT",
                  "constraintTokenRange": {
                    "startIndex": 8,
                    "endIndex": 12
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "runHooksChain"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@nomicfoundation/prototype!HookManager#runHooksInOrder:member(1)",
              "docComment": "/**\n * Runs all the hooks in the same order that `getHooks` returns them.\n *\n * @param hookCategoryName - The name of the category of the hook to run.\n *\n * @param hookName - The name of the hook to run.\n *\n * @param params - The params to pass to the hooks.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "runHooksInOrder<HookCategoryNameT extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": ", HookNameT extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": "[HookCategoryNameT]"
                },
                {
                  "kind": "Content",
                  "text": ", HookT extends "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": "[HookCategoryNameT][HookNameT]"
                },
                {
                  "kind": "Content",
                  "text": ">(hookCategoryName: "
                },
                {
                  "kind": "Content",
                  "text": "HookCategoryNameT"
                },
                {
                  "kind": "Content",
                  "text": ", hookName: "
                },
                {
                  "kind": "Content",
                  "text": "HookNameT"
                },
                {
                  "kind": "Content",
                  "text": ", params: "
                },
                {
                  "kind": "Reference",
                  "text": "InitialHookParams",
                  "canonicalReference": "@nomicfoundation/prototype!InitialHookParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<HookCategoryNameT, HookT>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Awaited",
                  "canonicalReference": "!Awaited:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Return",
                  "canonicalReference": "@nomicfoundation/prototype!Return:type"
                },
                {
                  "kind": "Content",
                  "text": "<HookT>>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 26
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hookCategoryName",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "hookName",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 15,
                    "endIndex": 17
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "HookCategoryNameT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "HookNameT",
                  "constraintTokenRange": {
                    "startIndex": 4,
                    "endIndex": 7
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "HookT",
                  "constraintTokenRange": {
                    "startIndex": 8,
                    "endIndex": 10
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "runHooksInOrder"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@nomicfoundation/prototype!HookManager#unregisterHooks:member(1)",
              "docComment": "/**\n * Removes previously registered hooks.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unregisterHooks<HookCategoryNameT extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(hookCategoryName: "
                },
                {
                  "kind": "Content",
                  "text": "HookCategoryNameT"
                },
                {
                  "kind": "Content",
                  "text": ", hookCategory: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HardhatHooks",
                  "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
                },
                {
                  "kind": "Content",
                  "text": "[HookCategoryNameT]>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hookCategoryName",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "hookCategory",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "HookCategoryNameT",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "unregisterHooks"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!IfEqual:type",
          "docComment": "/**\n * Utility to get a type only if A and B are equal.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type IfEqual<A, B, Result> = "
            },
            {
              "kind": "Content",
              "text": "[A] extends [B] ? [B] extends [A] ? Result : never : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/hooks.ts",
          "releaseTag": "Public",
          "name": "IfEqual",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Result",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!InitialChainedHookParams:type",
          "docComment": "/**\n * The intial parameters to run a chain of hooks.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InitialChainedHookParams<HookCategoryNameT extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "HardhatHooks",
              "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
            },
            {
              "kind": "Content",
              "text": ", HookT> = "
            },
            {
              "kind": "Content",
              "text": "HookCategoryNameT extends \"config\" ? "
            },
            {
              "kind": "Reference",
              "text": "ParametersExceptLast",
              "canonicalReference": "@nomicfoundation/prototype!ParametersExceptLast:type"
            },
            {
              "kind": "Content",
              "text": "<HookT> : "
            },
            {
              "kind": "Reference",
              "text": "ParametersExceptFirstAndLast",
              "canonicalReference": "@nomicfoundation/prototype!ParametersExceptFirstAndLast:type"
            },
            {
              "kind": "Content",
              "text": "<HookT>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/hooks.ts",
          "releaseTag": "Public",
          "name": "InitialChainedHookParams",
          "typeParameters": [
            {
              "typeParameterName": "HookCategoryNameT",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "HookT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 4,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!InitialHookParams:type",
          "docComment": "/**\n * The intial parameters to run a chain of hooks.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InitialHookParams<HookCategoryNameT extends "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "HardhatHooks",
              "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
            },
            {
              "kind": "Content",
              "text": ", HookT> = "
            },
            {
              "kind": "Content",
              "text": "HookCategoryNameT extends \"config\" ? "
            },
            {
              "kind": "Reference",
              "text": "Params",
              "canonicalReference": "@nomicfoundation/prototype!Params:type"
            },
            {
              "kind": "Content",
              "text": "<HookT> : "
            },
            {
              "kind": "Reference",
              "text": "ParametersExceptFirst",
              "canonicalReference": "@nomicfoundation/prototype!ParametersExceptFirst:type"
            },
            {
              "kind": "Content",
              "text": "<HookT>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/hooks.ts",
          "releaseTag": "Public",
          "name": "InitialHookParams",
          "typeParameters": [
            {
              "typeParameterName": "HookCategoryNameT",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "HookT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 4,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!LastParameter:type",
          "docComment": "/**\n * The last parameter of a function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LastParameter<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends (...args: [...infer _P, infer Last]) => any ? Last : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/utils.ts",
          "releaseTag": "Public",
          "name": "LastParameter",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!LazyLoadedHookCategoryFactories:type",
          "docComment": "/**\n * An object with the factories for the different hook categories that a plugin can define.\n *\n * @see\n *\n * HardhatPlugin#hooks\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type LazyLoadedHookCategoryFactories = "
            },
            {
              "kind": "Content",
              "text": "{\n    [HookCategoryNameT in keyof "
            },
            {
              "kind": "Reference",
              "text": "HardhatHooks",
              "canonicalReference": "@nomicfoundation/prototype!~HardhatHooks:interface"
            },
            {
              "kind": "Content",
              "text": "]?: "
            },
            {
              "kind": "Reference",
              "text": "HookCategoryFactory",
              "canonicalReference": "@nomicfoundation/prototype!HookCategoryFactory:type"
            },
            {
              "kind": "Content",
              "text": "<HookCategoryNameT> | string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/plugins.ts",
          "releaseTag": "Public",
          "name": "LazyLoadedHookCategoryFactories",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!ParametersExceptFirst:type",
          "docComment": "/**\n * All the parameters except the first one.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ParametersExceptFirst<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends (...args: [any, ...infer P]) => any ? P : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/utils.ts",
          "releaseTag": "Public",
          "name": "ParametersExceptFirst",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!ParametersExceptFirstAndLast:type",
          "docComment": "/**\n * All the parameters of a function, except the first and last ones.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ParametersExceptFirstAndLast<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends (...args: [any, ...infer P, any]) => any ? P : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/utils.ts",
          "releaseTag": "Public",
          "name": "ParametersExceptFirstAndLast",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!ParametersExceptLast:type",
          "docComment": "/**\n * All the parameters of a function, except the last one.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ParametersExceptLast<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends (...args: [...infer P, any]) => any ? P : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/utils.ts",
          "releaseTag": "Public",
          "name": "ParametersExceptLast",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!Params:type",
          "docComment": "/**\n * The parameters of a function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Params<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends (...args: infer P) => any ? P : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/utils.ts",
          "releaseTag": "Public",
          "name": "Params",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!ResolvedConfigurationVariable:interface",
          "docComment": "/**\n * A resolved configuration variable.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ResolvedConfigurationVariable "
            }
          ],
          "fileUrlPath": "src/types/config.ts",
          "releaseTag": "Public",
          "name": "ResolvedConfigurationVariable",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!ResolvedConfigurationVariable#_type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_type: "
                },
                {
                  "kind": "Content",
                  "text": "\"ResolvedConfigurationVariable\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@nomicfoundation/prototype!ResolvedConfigurationVariable#get:member(1)",
              "docComment": "/**\n * Returns the raw value of the configuration variable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "get"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@nomicfoundation/prototype!ResolvedConfigurationVariable#getBigInt:member(1)",
              "docComment": "/**\n * Returns the value of the configuration variable interpreted as a BigInt.\n *\n * @throws\n *\n * an error if the value is not a valid BigInt.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getBigInt(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<bigint>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getBigInt"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@nomicfoundation/prototype!ResolvedConfigurationVariable#getUrl:member(1)",
              "docComment": "/**\n * Returns the value of the configuration variable, after validating that it's a URL.\n *\n * @throws\n *\n * an error if the value is not a URL.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getUrl(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getUrl"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!Return:type",
          "docComment": "/**\n * The return type of a function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Return<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends (...args: any[]) => infer Ret ? Ret : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/utils.ts",
          "releaseTag": "Public",
          "name": "Return",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@nomicfoundation/prototype!SensitiveString:type",
          "docComment": "/**\n * A sensitive string, which can be provided as a literal string or as a configuration variable.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SensitiveString = "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "ConfigurationVariable",
              "canonicalReference": "@nomicfoundation/prototype!ConfigurationVariable:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/config.ts",
          "releaseTag": "Public",
          "name": "SensitiveString",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!SolidityConfig:interface",
          "docComment": "/**\n * The resolved solidity configuration.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SolidityConfig "
            }
          ],
          "fileUrlPath": "src/types/config.ts",
          "releaseTag": "Public",
          "name": "SolidityConfig",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!SolidityConfig#version:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "version: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!SolidityUserConfig:interface",
          "docComment": "/**\n * The solidity configuration as provided by the user.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SolidityUserConfig "
            }
          ],
          "fileUrlPath": "src/types/config.ts",
          "releaseTag": "Public",
          "name": "SolidityUserConfig",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!SolidityUserConfig#version:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "version: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!UserInterruptionHooks:interface",
          "docComment": "/**\n * User interruptions-related hooks.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UserInterruptionHooks "
            }
          ],
          "fileUrlPath": "src/types/hooks.ts",
          "releaseTag": "Public",
          "name": "UserInterruptionHooks",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!UserInterruptionHooks#displayMessage:member",
              "docComment": "/**\n * Provide an implementation of this hook to customize how the `UserInterruptionManager` displays messages to the user.\n *\n * @param interruptor - A name or description of the module trying to display the message.\n *\n * @param message - The message to display.\n *\n * @param next - A function to call if the hook implementation decides to not handle the message.\n *\n * @see\n *\n * UserInterruptionManager#displayMessage to understand when the returned promise should be resolved.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayMessage: "
                },
                {
                  "kind": "Content",
                  "text": "(context: "
                },
                {
                  "kind": "Reference",
                  "text": "HookContext",
                  "canonicalReference": "@nomicfoundation/prototype!HookContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ", interruptor: string, message: string, next: (nextContext: "
                },
                {
                  "kind": "Reference",
                  "text": "HookContext",
                  "canonicalReference": "@nomicfoundation/prototype!HookContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ", nextInterruptor: string, nextMesage: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "displayMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!UserInterruptionHooks#requestInput:member",
              "docComment": "/**\n * Provide an implementation of this hook to customize how the `UserInterruptionManager` requests input from the user.\n *\n * @param interruptor - A name or description of the module trying to request input form the user.\n *\n * @param inputDescription - A description of the input that is being requested.\n *\n * @param next - A function to call if the hook implementation decides to not handle the input request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestInput: "
                },
                {
                  "kind": "Content",
                  "text": "(nextContext: "
                },
                {
                  "kind": "Reference",
                  "text": "HookContext",
                  "canonicalReference": "@nomicfoundation/prototype!HookContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ", interruptor: string, inputDescription: string, next: (nextContext: "
                },
                {
                  "kind": "Reference",
                  "text": "HookContext",
                  "canonicalReference": "@nomicfoundation/prototype!HookContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ", nextInterruptor: string, nextInputDescription: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestInput",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!UserInterruptionHooks#requestSecretInput:member",
              "docComment": "/**\n * Provide an implementation of this hook to customize how the `UserInterruptionManager` requests a secret input from the user.\n *\n * Note that your implementation of this hook should take care of to not display the user's input in the console, and not leak it in any way.\n *\n * @param interruptor - A name or description of the module trying to request input form the user.\n *\n * @param inputDescription - A description of the input that is being requested.\n *\n * @param next - A function to call if the hook implementation decides to not handle the input request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestSecretInput: "
                },
                {
                  "kind": "Content",
                  "text": "(nextContext: "
                },
                {
                  "kind": "Reference",
                  "text": "HookContext",
                  "canonicalReference": "@nomicfoundation/prototype!HookContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ", interruptor: string, inputDescription: string, next: (nextContext: "
                },
                {
                  "kind": "Reference",
                  "text": "HookContext",
                  "canonicalReference": "@nomicfoundation/prototype!HookContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ", nextInterruptor: string, nextInputDescription: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestSecretInput",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@nomicfoundation/prototype!UserInterruptionManager:interface",
          "docComment": "/**\n * This interface is used to interact with the user in the middle of the execution of an unrelated piece of functionality.\n *\n * Some examples of things that you may use this interface for: - Asking the user to sign a transaction with his hardware wallet. - Asking the user for a password to descrypt a store of configuration variables.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UserInterruptionManager "
            }
          ],
          "fileUrlPath": "src/types/user-interruptions.ts",
          "releaseTag": "Public",
          "name": "UserInterruptionManager",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!UserInterruptionManager#displayMessage:member",
              "docComment": "/**\n * Displays a message to the user, returning a `Promise` that resolve when the message was displayed and we have a good digree of certainty that the user has read it.\n *\n * For example, if the plugin/task handling the user output doesn't refresh the screen, the returned `Promise` can resolve immediately. If it refreshes the screen, the `Promise` may resolve only after certain user interaction.\n *\n * @param interruptor - A name or description of the module calling this method.\n *\n * @param message - The message to display.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displayMessage: "
                },
                {
                  "kind": "Content",
                  "text": "(interruptor: string, message: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "displayMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!UserInterruptionManager#requestInput:member",
              "docComment": "/**\n * Request user input, returning a `Promise` that resolves with the user's input.\n *\n * @param interruptor - A name or description of the module calling this method.\n *\n * @param inputDescription - A description of the input that is being requested.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestInput: "
                },
                {
                  "kind": "Content",
                  "text": "(interruptor: string, inputDescription: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestInput",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@nomicfoundation/prototype!UserInterruptionManager#requestSecretInput:member",
              "docComment": "/**\n * Request a secret input from the user, returning a `Promise` that resolves with the user's input.\n *\n * The main difference between this method and `requestInput` is that this method is that the plugin/task handling the user input/output should take extra care to avoid leaking the user's input or displaying it in the user's terminal.\n *\n * @param interruptor - A name or description of the module calling this method.\n *\n * @param inputDescription - A description of the input that is being requested.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestSecretInput: "
                },
                {
                  "kind": "Content",
                  "text": "(interruptor: string, inputDescription: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestSecretInput",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@nomicfoundation/prototype!UserInterruptionManager#uninterrupted:member(1)",
              "docComment": "/**\n * Executes `f` without allowing user interruptions during its execution.\n *\n * @param f - The function to execute.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uninterrupted<ReturnT>(f: "
                },
                {
                  "kind": "Content",
                  "text": "() => ReturnT"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Awaited",
                  "canonicalReference": "!Awaited:type"
                },
                {
                  "kind": "Content",
                  "text": "<ReturnT>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "f",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "ReturnT",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "uninterrupted"
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
